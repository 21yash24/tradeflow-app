
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users: Can read all profiles, but only update their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
      
      // Subcollections for followers/following
      match /followers/{followerId} {
        allow read: if request.auth != null;
      }
      match /following/{followingId} {
        allow read: if request.auth != null;
      }
    }

    // Trades: Users can only manage their own trades.
    match /trades/{tradeId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Alerts: Users can only manage their own alerts.
    match /alerts/{alertId} {
       allow read, write: if request.auth.uid == resource.data.userId;
       allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Streaks & Discipline: Users can only manage their own data.
    match /streaks/{userId} {
       allow read, write: if request.auth.uid == userId;
    }
    match /discipline/{docId} {
       allow read, write: if request.auth.uid == resource.data.userId;
       allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Accounts: Users can only manage their own accounts.
     match /accounts/{accountId} {
      allow read, write: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Posts: Can be read by anyone, but only created/modified by the author.
    // Liking is allowed by any authenticated user.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth.uid == resource.data.authorId // Author can edit content
                    || (request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['likedBy', 'likeCount'])); // Anyone can like/unlike
      allow delete: if request.auth.uid == resource.data.authorId;

      // Comments subcollection
      match /comments/{commentId} {
          allow read, create: if request.auth != null;
          allow update, delete: if request.auth.uid == resource.data.authorId;
      }
    }
  }
}
