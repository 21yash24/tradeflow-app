rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Allow users to manage their own subcollections
      match /{subcollection}/{docId} {
         allow read, write: if request.auth.uid == userId;
      }
    }

    // A user can only manage their own trades.
    match /trades/{tradeId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // A user can only manage their own accounts.
    match /accounts/{accountId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // A user can only manage their own alerts.
    match /alerts/{alertId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // A user can only manage their own discipline entries.
    match /discipline/{disciplineId} {
       allow read, write: if request.auth.uid == resource.data.userId;
       allow create: if request.auth.uid == request.resource.data.userId;
    }

    // A user can only manage their own streak document.
    match /streaks/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Community Posts: Any authenticated user can read.
    // Users can only create posts for themselves.
    // Users can only update/delete their own posts.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth.uid == resource.data.authorId;
      
      // Allow any authenticated user to like/unlike a post (update specific fields)
      allow update: if request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likeCount']);
      
      // Comments
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.authorId;
      }
    }
  }
}
