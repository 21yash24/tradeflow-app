service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      
      match /following/{targetId} {
        allow read, write, delete: if request.auth.uid == userId;
      }

      match /followers/{followerId} {
         allow read: if request.auth != null;
         allow write, delete: if request.auth.uid == followerId;
      }
    }
    
    match /posts/{postId} {
      allow get, list: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.authorId;
      
      // Allow any authenticated user to "like" a post by updating specific fields
      allow update: if request.auth != null
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['likeCount', 'likedBy']);
      
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.authorId;
      }
    }

    match /trades/{tradeId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    match /accounts/{accountId} {
       allow read, write: if request.auth.uid == resource.data.userId;
    }

    match /alerts/{alertId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    match /discipline/{disciplineId} {
       allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /streaks/{userId} {
       allow read, write: if request.auth.uid == userId;
    }
    
    match /groups/{groupId} {
      // For now, allow any auth'd user to manage groups
      // This would be tightened in a real app with roles
      allow read, write: if request.auth != null;
      
      match /members/{memberId} {
         allow read, write: if request.auth != null;
      }
    }
  }
}