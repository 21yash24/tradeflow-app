rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Following/Followers subcollections
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isAuthenticated();
    }

    // Trades: Users can only manage their own trades.
    match /trades/{tradeId} {
      allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Accounts: Users can only manage their own accounts.
    match /accounts/{accountId} {
       allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
       allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Discipline Logs: Users can only manage their own discipline logs.
    match /discipline/{logId} {
       allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
       allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Streaks: Users can read and write their own streak document.
    match /streaks/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Posts & Comments: Anyone can read, but only owners can modify their own content.
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }
  }
}
