rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuth();
      allow create, update: if isAuth() && isOwner(userId);
      
      match /following/{targetId} {
        allow read, write: if isAuth() && isOwner(userId);
      }
      match /followers/{followerId} {
        allow read: if isAuth();
        allow write: if isAuth() && request.auth.uid == followerId;
      }
    }

    match /posts/{postId} {
      allow list, read: if isAuth();
      allow create: if isAuth();
      allow update, delete: if isAuth() && isOwner(resource.data.authorId);

      match /comments/{commentId} {
        allow list, read, create: if isAuth();
        allow update, delete: if false; // Comments are immutable for now
      }
    }
    
    match /trades/{tradeId} {
        allow read, write: if isAuth() && isOwner(resource.data.userId);
    }
    // This allows a user to query their own trades
    match /trades/{tradeId} {
        allow list: if isAuth() && request.query.where.constraints[0].value == request.auth.uid;
    }

    match /accounts/{accountId} {
        allow read, write: if isAuth() && isOwner(resource.data.userId);
    }
    // This allows a user to query their own accounts
    match /accounts/{accountId} {
        allow list: if isAuth() && request.query.where.constraints[0].value == request.auth.uid;
    }

    match /discipline/{disciplineId} {
        allow read, write: if isAuth() && request.auth.uid == disciplineId.split('_')[0];
    }
    // This allows a user to query their own discipline entries
     match /discipline/{disciplineId} {
        allow list: if isAuth() && request.query.where.constraints[0].value == request.auth.uid;
    }

    match /streaks/{userId} {
      allow read, write: if isAuth() && isOwner(userId);
    }
  }
}
