
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read their own profile and other users' profiles,
    // but can only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);

      // Users can manage their own following/followers list
      match /following/{targetUserId} {
        allow read, write: if isOwner(userId);
      }
       match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(followerId);
      }
    }

    // Users can only create, read, update, or delete their own trades
    match /trades/{tradeId} {
      allow read, write, delete, create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Users can only manage their own trading accounts
    match /accounts/{accountId} {
       allow read, write, delete, create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Users can only manage their own discipline entries
    match /discipline/{disciplineId} {
       allow read, write, delete, create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Users can only manage their own streak document
    match /streaks/{userId} {
        allow read, write: if isOwner(userId);
    }

    // Allow any authenticated user to read community posts
    // Only the author can create, update, or delete their own posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);

      // Any authenticated user can create comments
      // Only the author of the comment can update/delete it.
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }
  }
}
