rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId);
      
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /trades/{tradeId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      allow update: if isAuthenticated() && 
                      (
                        (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['likeCount', 'likedBy'])) ||
                        (isOwner(resource.data.authorId) && 
                          request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['content', 'imageUrl']))
                      );
                      
      match /comments/{commentId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }

    // Explicit rule for streaks collection
    match /streaks/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    match /{collection}/{docId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
