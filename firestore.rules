rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update, create: if request.auth.uid == userId;
    }

    // Users can manage their own followers/following lists
    match /users/{userId}/followers/{followerId} {
      allow read, create, delete: if request.auth.uid == followerId;
    }
    match /users/{userId}/following/{followingId} {
        allow read, create, delete: if request.auth.uid == userId;
    }
    
    // --- User-specific data collections ---
    // User can only CRUD documents where they are the owner.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    match /trades/{tradeId} {
      allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }
    
    match /accounts/{accountId} {
       allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }

    match /discipline/{disciplineId} {
      // ID is composite, so we check the data field.
       allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }
    
    match /streaks/{streakId} {
       // streakId is the userId
       allow read, create, update, delete: if request.auth.uid == streakId;
    }

    // --- Community data ---
    match /posts/{postId} {
        allow read: if request.auth != null;
        // Allow create if the new document's authorId is the user's uid
        allow create: if isOwner(request.resource.data.authorId);
        // Allow update/delete if the existing document's authorId is the user's uid
        allow update, delete: if isOwner(resource.data.authorId);
    }

    match /posts/{postId}/comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow delete: if isOwner(resource.data.authorId);
    }
  }
}