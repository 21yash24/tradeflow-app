rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read a profile
      allow read: if isAuthenticated();
      // Only the owner can create or update their own profile
      allow create, update: if isOwner(userId);
      
      // Rules for subcollections of a user
      match /{subcollection}/{docId} {
        // Only the owner can manage their own subcollections (e.g., following)
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for the 'trades' collection
    match /trades/{tradeId} {
        // A user can create a trade if they are the owner
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        // A user can read, update, or delete a trade if they are the owner
        allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Rules for the 'posts' collection
    match /posts/{postId} {
      // Any authenticated user can read posts
      allow read: if isAuthenticated();
      // Any authenticated user can create a post
      allow create: if isAuthenticated();
      
      // Only the author can delete their own post
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Allow users to like/unlike (update only specific fields)
      // and allow the author to edit the content of their own post
      allow update: if isAuthenticated() && 
                      (
                        // Rule for liking/unliking posts
                        (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['likeCount', 'likedBy'])) ||
                        // Rule for authors to edit their own posts
                        (isOwner(resource.data.authorId) && 
                          request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['content', 'imageUrl']))
                      );
                      
      // Rules for the 'comments' subcollection within a post
      match /comments/{commentId} {
        // Any authenticated user can read or create comments
        allow read, create: if isAuthenticated();
        // Only the author of the comment can update or delete it
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }
    
    // Rules for the 'streaks' collection, identified by user ID
    match /streaks/{userId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Rules for the 'accounts' collection
    match /accounts/{accountId} {
        allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Rules for the 'discipline' collection
    match /discipline/{disciplineId} {
      // Allow create if the user is the owner
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Allow read, update, and delete if the user is the owner
      allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
