rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      // A user can only create their own profile document
      allow create: if isOwner(userId);
      // A user can only update their own profile document
      allow update: if isOwner(userId);
      // A user cannot delete their profile
      allow delete: if false;

      // Followers and Following sub-collections
      match /followers/{followerId} {
        // A user can create/delete a document in another user's followers list if the doc ID is their own UID.
        allow write: if isOwner(followerId);
        allow read: if isAuthenticated();
      }

      match /following/{followingId} {
         // A user can only manage their own following list
        allow write: if isOwner(userId);
        allow read: if isAuthenticated();
      }
    }
    
    // Trades, Accounts, Alerts, Discipline, Streaks
    match /{collection}/{docId} {
      // These collections can only be accessed by the user who owns them
      allow read, write, delete: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Allow create if the user is authenticated and the new doc's userId is their own
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Community Posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);

      // Allow author to update content, but anyone to update likes.
      allow update: if isAuthenticated() && (
        // Case 1: The user is the author, they can change content and imageUrl
        (isOwner(resource.data.authorId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'imageUrl'])) ||
        // Case 2: Any authenticated user can update likeCount and likedBy array.
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'likedBy', 'commentCount']))
      );

      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Comments and Likes sub-collections
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
      
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if isOwner(userId);
      }
    }

    // Community Groups
    match /groups/{groupId} {
      // TODO: Add more granular rules (e.g., only members can read private groups)
      allow read: if isAuthenticated(); 
      allow create: if isAuthenticated() && isOwner(request.resource.data.creatorId);
      // Only the creator can update/delete a group for now
      allow update, delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }
  }
}
