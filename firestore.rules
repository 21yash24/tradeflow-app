rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated and is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      // Anyone authenticated can read a user's public profile
      allow read: if request.auth != null;
      // Only the owner can create or update their profile
      allow create, update: if isOwner(userId);

      // Following/Followers sub-collections for social features
      match /following/{targetUserId} {
        allow read, create, delete: if isOwner(userId);
      }
      match /followers/{followerUserId} {
        allow read: if request.auth != null;
        allow create, delete: if isOwner(followerUserId);
      }
    }
    
    // POSTS
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if request.auth != null;
      // Authenticated users can create posts, but can only update/delete their own
      allow create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.authorId);

      // Likes sub-collection
      match /likes/{userId} {
        // A user can only like/unlike for themselves
        allow create, delete: if isOwner(userId);
        // Allow anyone to see who liked a post
        allow read: if request.auth != null;
      }
      
      // Comments sub-collection
      match /comments/{commentId} {
        // Anyone authenticated can read comments
        allow read: if request.auth != null;
        // Authenticated users can create comments
        allow create: if request.auth != null;
        // Only the author of the comment can update or delete it
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
    // GROUPS
    match /groups/{groupId} {
       // Anyone authenticated can create a group
       allow create: if request.auth != null;
       // Only group members can read group data
       allow read: if exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
       // Only the group creator can update or delete it (could be expanded to admins)
       allow update, delete: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == 'admin';
       
       // Group Members sub-collection
       match /members/{userId} {
         // Users can join/leave a group (become a member of their own accord)
         allow create, delete: if isOwner(userId);
         // Members can read the member list
         allow read: if exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
         // Only admins can change roles (future-proofing)
         allow update: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == 'admin';
       }
    }

    // Alerts collection
    match /alerts/{alertId} {
      allow read, create, update, delete: if isOwner(resource.data.userId);
    }

    // Trades collection
    match /trades/{tradeId} {
      allow read, create, update, delete: if isOwner(resource.data.userId);
    }
    
    // Accounts collection
    match /accounts/{accountId} {
      allow read, create, update, delete: if isOwner(resource.data.userId);
    }

    // Discipline collection
    match /discipline/{disciplineId} {
      // The disciplineId is composite: `${user.uid}_${date}`
      allow read, create, update, delete: if request.auth != null && request.auth.uid == split(disciplineId, '_')[0];
    }

    // Streaks collection
    match /streaks/{streakId} {
      allow read, write: if isOwner(streakId);
    }
  }
}
