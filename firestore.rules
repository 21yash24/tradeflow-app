rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write to their own profile.
    // Any authenticated user can list the collection for search purposes.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
      allow list: if request.auth != null;

      // Allow any authenticated user to follow/unfollow others
      match /followers/{followerId} {
        allow read, create, delete: if request.auth != null;
      }
      match /following/{followingId} {
        allow read, create, delete: if request.auth != null;
      }
    }

    // Users can only read/write their own trades.
    match /trades/{tradeId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Users can only manage their own accounts.
    match /accounts/{accountId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Users can only manage their own discipline entries.
    match /discipline/{disciplineId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Users can only manage their own streak data.
    match /streaks/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Users can only manage their own price alerts.
    match /alerts/{alertId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Community Posts
    match /posts/{postId} {
      // Anyone logged in can read posts
      allow read: if request.auth != null;
      
      // Anyone logged in can create posts
      allow create: if request.auth != null;
      
      // Only the author can update most fields or delete the post
      allow update, delete: if request.auth.uid == resource.data.authorId;
      
      // Allow any logged-in user to update ONLY the likeCount and likedBy fields
      allow update: if request.auth != null
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['likeCount', 'likedBy']);
                       
      // Sub-collections for comments and likes
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.authorId;
      }

      match /likes/{userId} {
        allow read, create: if request.auth.uid == userId;
        allow delete: if request.auth.uid == userId;
      }
    }
  }
}
